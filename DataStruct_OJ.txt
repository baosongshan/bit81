顺序表语链表
1、https://leetcode-cn.com/problems/remove-linked-list-elements/description/ [删除链表中等于给定值 val 的所有节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head == NULL)
         return NULL;

    struct ListNode *p = head;
    struct ListNode *prev = NULL;

    while(p != NULL)
    {
        if(p->val == val)
        {
            if(prev == NULL)
            {
                head = head->next;
                free(p);
                p = head;
            }
            else
            {
                prev->next = p->next;
                free(p);
                p = prev->next;
            }
        }
        else
        {
            prev = p;
            p = p->next;            
        }
    }
    return head;
}

2、https://leetcode-cn.com/problems/reverse-linked-list/description/ [反转一个单链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseList(struct ListNode* head)
{
    if(head==NULL || head->next==NULL)
        return head;

    struct ListNode *p = head->next;
    head->next = NULL;
    while(p != NULL)
    {
        struct ListNode *q = p->next;
        p->next = head;
        head = p;
        p = q;
    }
    return head;
}

3、https://leetcode-cn.com/problems/reverse-linked-list/submissions/ 
  [给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个
中间结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* middleNode(struct ListNode* head)
{
    if(head==NULL && head->next==NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

/*
int GetLength(struct ListNode *head)
{
    int nodeCount = 0;
    struct ListNode *p = head;
    while(p != NULL)
    {
        nodeCount++;
        p = p->next;
    }
    return nodeCount;
}

struct ListNode* middleNode(struct ListNode* head)
{
    int nodeCount = GetLength(head);
    struct ListNode *p = head;
    for(int i=0; i<nodeCount/2; ++i)
        p = p->next;
    return p;
}
*/

4、 https://leetcode-cn.com/problems/middle-of-the-linked-list/ [输入一个链表，输出该链表中倒数第k个结点]



栈和队列_Oj

1、https://leetcode-cn.com/problems/valid-parentheses/ [括号匹配]

#define DataType char
typedef struct StackNode
{
	DataType data;
	struct StackNode *next;
}StackNode;

typedef StackNode* ListStack;


bool ListStackEmpty(ListStack *pst);
void ListStackInit(ListStack *pst);
DataType ListStackTop(ListStack *pst);
void ListStackPush(ListStack *pst, DataType x);
void ListStackPop(ListStack *pst);
void ListStackShow(ListStack pst);

bool ListStackEmpty(ListStack *pst)
{
    return *pst == NULL;    
}

void ListStackInit(ListStack *pst)
{
	*pst = NULL;
}

DataType ListStackTop(ListStack *pst)
{
	assert(*pst != NULL);//
	return (*pst)->data;
}

void ListStackPush(ListStack *pst, DataType x)
{
	StackNode *node = (StackNode*)malloc(sizeof(StackNode));
	assert(node != NULL);
	node->data = x;

	node->next = *pst;
	*pst = node;
}

void ListStackPop(ListStack *pst)
{
	StackNode *p = *pst;
	*pst = p->next;
	free(p);
}

///////////////////////////////////////////////////////////
bool isValid(char * s)
{
    if(s == NULL)
        return false;
    if(*s == '\0')
        return true;

    ListStack st;
    ListStackInit(&st);

    while(*s != '\0')
    {
        if(*s=='(' || *s=='[' || *s=='{')
        {
            ListStackPush(&st, *s);
        }        
        else
        {
            if(ListStackEmpty(&st))
                return false;
            
            int topval = ListStackTop(&st);
            if((*s==')'&& topval!='(') 
               || (*s==']'&& topval!='[')
               || (*s=='}'&& topval!='{'))
                return false;
            ListStackPop(&st);
        }
        s++;
    }

    bool flag = ListStackEmpty(&st);
    free(st);
    st = NULL;
    return flag;
}

/*
bool isValid(char * s)
{
    if(s == NULL)
        return false;
    if(*s == '\0')
        return true;
    
    int len = strlen(s);
    char *st = (char*)malloc(sizeof(char) * len);
    int top = 0;

    while(*s != '\0')
    {
        if(*s=='(' || *s=='[' || *s=='{')
        {
            st[top++] = *s;
        }        
        else
        {
            if(top == 0)
                return false;
            
            if((*s==')'&&st[top-1]!='(') 
               || (*s==']'&&st[top-1]!='[')
               || (*s=='}'&&st[top-1]!='{'))
                return false;
            top--;
        }
        s++;
    }

    bool flag = (top==0?1:0);
    free(st);
    st = NULL;
    return flag;
}
*/

2、https://leetcode-cn.com/problems/implement-stack-using-queues/submissions/[用队列实现栈]
typedef struct Queue
{
    int *base;
    int front;
    int tail;
}Queue;

void QueueInit(Queue *Q)
{
    int n = 1000;
    Q->base = (int*) malloc(sizeof(int) * n);
    Q->front = Q->tail = 0;    
}
void QueuePush(Queue *Q, int x)
{
    Q->base[Q->tail++] = x;    
}
void QueuePop(Queue *Q)
{
    Q->front++;
}
int QueueFront(Queue *Q)
{
    return Q->base[Q->front];    
}
int QueueBack(Queue *Q)
{
    return Q->base[Q->tail-1];
}
bool QueueEmpty(Queue *Q)
{
    return Q->front == Q->tail;
}
//////////////////////////////////////////////////////
typedef struct 
{
    Queue  q1;
    Queue  q2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() 
{
    MyStack *pst = (MyStack *)malloc(sizeof(MyStack));
    QueueInit(&(pst->q1));
    QueueInit(&(pst->q2));
    return pst;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) 
{
     Queue *pnoempty;
    if(QueueEmpty(&(obj->q1)))
    {
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
    }
    QueuePush(pnoempty, x);
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) 
{
    Queue *pnoempty, *pempty;
    if(QueueEmpty(&(obj->q1)))
    {
        pempty = &(obj->q1);
        pnoempty = &(obj->q2);
    }
    else
    {
        pempty = &(obj->q2);
        pnoempty = &(obj->q1);
    }

    int val;
    while(!QueueEmpty(pnoempty))
    {
        val = QueueFront(pnoempty);
        QueuePop(pnoempty);
        if(QueueEmpty(pnoempty))
            break;
        QueuePush(pempty, val);
    }
    return val;
}

/** Get the top element. */
int myStackTop(MyStack* obj) 
{
    Queue *pnoempty;
    if(QueueEmpty(&(obj->q1)))
    {
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
    }

    return QueueBack(pnoempty);
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj)
{
     return QueueEmpty(&(obj->q1)) && QueueEmpty(&(obj->q2));
}

void myStackFree(MyStack* obj) 
{
    free(obj);    
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/

3、https://leetcode-cn.com/problems/implement-queue-using-stacks/ [用栈实现队列]

typedef struct Stack
{
    int *base;
    int  top;
    int  capacity;
}Stack;

bool StackFull(Stack *pst)
{
    return pst->top >= pst->capacity;
}
bool StackEmpty(Stack *pst)
{
    return pst->top == 0;
}
Stack* StackCreate(int k)
{
    Stack *pst = (Stack*)malloc(sizeof(Stack));
    pst->capacity = k;
    pst->base = (int*)malloc(sizeof(int) * pst->capacity);
    pst->top = 0;
    return pst;
}
void StackFree(Stack *pst)
{
    free(pst->base);
    pst->base = NULL;
    pst->capacity = pst->top = 0;
}
void StackPush(Stack *pst, int x)
{
    if(StackFull(pst))
        return;
    pst->base[pst->top++] = x;
}
void StackPop(Stack *pst)
{
    if(StackEmpty(pst))
        return;
    pst->top--;    
}
int StackTop(Stack *pst)
{
    assert(pst->top != 0);
    return pst->base[pst->top-1];
}

//////////////////////////////////////////////////////////////////
typedef struct 
{
    Stack *stack1;
    Stack *stack2;
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() 
{
    int n = 100;
    MyQueue *queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->stack1 = StackCreate(n);
    queue->stack2 = StackCreate(n);
    return queue;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) 
{
      StackPush(obj->stack1, x);
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) 
{
      if(StackEmpty(obj->stack2))
      {
          while(!StackEmpty(obj->stack1))
          {
              StackPush(obj->stack2, StackTop(obj->stack1));
              StackPop(obj->stack1);
          }
      }
      int val = StackTop(obj->stack2);
      StackPop(obj->stack2);
      return val;
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) 
{
    if(StackEmpty(obj->stack2))
      {
          while(!StackEmpty(obj->stack1))
          {
              StackPush(obj->stack2, StackTop(obj->stack1));
              StackPop(obj->stack1);
          }
      }
      int val = StackTop(obj->stack2);
      return val;      
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) 
{
    return StackEmpty(obj->stack1) && StackEmpty(obj->stack2);  
}

void myQueueFree(MyQueue* obj) 
{
    free(obj->stack1);
    free(obj->stack2);
    free(obj);    
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/

4、https://leetcode-cn.com/problems/min-stack/submissions/ [实现一个最小栈]

typedef struct Stack
{
    int *base;
    int  top;
    int  capacity;
}Stack;

bool StackFull(Stack *pst)
{
    return pst->top >= pst->capacity;
}
bool StackEmpty(Stack *pst)
{
    return pst->top == 0;
}
Stack* StackCreate(int k)
{
    Stack *pst = (Stack*)malloc(sizeof(Stack));
    pst->capacity = k;
    pst->base = (int*)malloc(sizeof(int) * pst->capacity);
    pst->top = 0;
    return pst;
}
void StackFree(Stack *pst)
{
    free(pst->base);
    pst->base = NULL;
    pst->capacity = pst->top = 0;
}
void StackPush(Stack *pst, int x)
{
    if(StackFull(pst))
        return;
    pst->base[pst->top++] = x;
}
void StackPop(Stack *pst)
{
    if(StackEmpty(pst))
        return;
    pst->top--;    
}
int StackTop(Stack *pst)
{
    assert(pst->top != 0);
    return pst->base[pst->top-1];
}

////////////////////////////////////////////////////////////////////

typedef struct 
{    
    Stack *st;
    Stack *min_st;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() 
{
    int n = 1000;
    MinStack *pst = (MinStack*)malloc(sizeof(MinStack));
    pst->st = StackCreate(n);
    pst->min_st = StackCreate(n);   
    return pst;
}

void minStackPush(MinStack* obj, int x) 
{
      StackPush(obj->st, x);
      if(StackEmpty(obj->min_st) || x<=StackTop(obj->min_st))
      {
          StackPush(obj->min_st, x);          
      }
}

void minStackPop(MinStack* obj) 
{
    int val = StackTop(obj->st);
    StackPop(obj->st);

    if(val == StackTop(obj->min_st))
    {
        StackPop(obj->min_st);
    }
}

int minStackTop(MinStack* obj) 
{
    return StackTop(obj->st);
}

int minStackGetMin(MinStack* obj) 
{
    return StackTop(obj->min_st);
}

void minStackFree(MinStack* obj) 
{
    free(obj->st);
    free(obj->min_st);
    free(obj);    
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/

5、https://leetcode-cn.com/problems/design-circular-queue/ [设计循环队列]

typedef struct 
{
    int *base;
    int capacity;
    int front;
    int tail;
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */

bool myCircularQueueIsEmpty(MyCircularQueue* obj) ;
/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj);

MyCircularQueue* myCircularQueueCreate(int k) 
{
    MyCircularQueue *pc = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    pc->capacity = k+1;
    pc->base = (int*)malloc(sizeof(int)*pc->capacity);
    pc->front = pc->tail = 0;
    return pc;
}

/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) 
{
    if(myCircularQueueIsFull(obj))
        return false;
    obj->base[obj->tail] = value;
    obj->tail = (obj->tail+1) % obj->capacity;
    return true;
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj)) 
        return false;
    obj->front = (obj->front+1) % obj->capacity;
    return true; 
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[obj->front];  
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[(obj->tail-1+obj->capacity)%obj->capacity];  
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) 
{
    return obj->front == obj->tail;  
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) 
{
    return (obj->tail+1)%(obj->capacity) == obj->front;  
}

void myCircularQueueFree(MyCircularQueue* obj) 
{
    free(obj->base);
    free(obj);    
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/