顺序表语链表
1、https://leetcode-cn.com/problems/remove-linked-list-elements/description/ [删除链表中等于给定值 val 的所有节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head == NULL)
         return NULL;

    struct ListNode *p = head;
    struct ListNode *prev = NULL;

    while(p != NULL)
    {
        if(p->val == val)
        {
            if(prev == NULL)
            {
                head = head->next;
                free(p);
                p = head;
            }
            else
            {
                prev->next = p->next;
                free(p);
                p = prev->next;
            }
        }
        else
        {
            prev = p;
            p = p->next;            
        }
    }
    return head;
}

2、https://leetcode-cn.com/problems/reverse-linked-list/description/ [反转一个单链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseList(struct ListNode* head)
{
    if(head==NULL || head->next==NULL)
        return head;

    struct ListNode *p = head->next;
    head->next = NULL;
    while(p != NULL)
    {
        struct ListNode *q = p->next;
        p->next = head;
        head = p;
        p = q;
    }
    return head;
}

3、https://leetcode-cn.com/problems/reverse-linked-list/submissions/ 
  [给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个
中间结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* middleNode(struct ListNode* head)
{
    if(head==NULL && head->next==NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

/*
int GetLength(struct ListNode *head)
{
    int nodeCount = 0;
    struct ListNode *p = head;
    while(p != NULL)
    {
        nodeCount++;
        p = p->next;
    }
    return nodeCount;
}

struct ListNode* middleNode(struct ListNode* head)
{
    int nodeCount = GetLength(head);
    struct ListNode *p = head;
    for(int i=0; i<nodeCount/2; ++i)
        p = p->next;
    return p;
}
*/

4、 https://leetcode-cn.com/problems/middle-of-the-linked-list/ [输入一个链表，输出该链表中倒数第k个结点]
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) 
    {
        if(pListHead == NULL)
            return NULL;
        ListNode *fast, *slow;
        fast = slow = pListHead;
        while(k-- > 0)
        {
            if(fast == NULL)
                return NULL;
            fast = fast->next;
        }
        while(fast != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};

5、https://leetcode-cn.com/problems/merge-two-sorted-lists/description/ [将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)
{
    if(l1==NULL && l2==NULL)
        return NULL;
    if(l1 == NULL)
        return l2;
    if(l2 == NULL)
        return l1;

    struct ListNode *pHead;
    if(l1->val < l2->val)
    {
        pHead = l1;
        l1 = l1->next;
    }
    else
    {
        pHead = l2;
        l2 = l2->next;
    }

    struct ListNode *pTail = pHead;
    while(l1!=NULL && l2!=NULL)
    {
        if(l1->val < l2->val)
        {
            pTail->next = l1;
            l1 = l1->next;
        }
        else
        {
            pTail->next = l2;
            l2 = l2->next;
        }
        pTail = pTail->next;
    }

    if(l1 != NULL)
        pTail->next = l1;
    if(l2 != NULL)
        pTail->next = l2;

    return pHead;
}

6、https://www.nowcoder.com/practice/0e27e0b064de4eacac178676ef9c9d70?tpId=8&&tqId=11004&rp=2&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking [编写代码，以给定值x为基准将链表分割成两部分，所有小于x的结点排在大于或等于x的结点之前 ]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Partition {
public:
    ListNode* partition(ListNode* pHead, int x) 
    {
        // write code here
        if(pHead == NULL)
            return NULL;
        ListNode *pLessHead, *pLessTail;
        ListNode *pGreatHead, *pGreatTail;
        pLessHead = pLessTail = (ListNode*)malloc(sizeof(ListNode));
        pGreatHead = pGreatTail = (ListNode*)malloc(sizeof(ListNode));
        
        while(pHead != NULL)
        {
            if(pHead->val < x)
            {
                pLessTail->next = pHead;
                pLessTail = pLessTail->next;
            }
            else
            {
                pGreatTail->next = pHead;
                pGreatTail = pGreatTail->next;
            }
            pHead = pHead->next;
        }
        
        pLessTail->next = pGreatTail->next = NULL;
        
        pLessTail->next = pGreatHead->next;
        pHead = pLessHead->next;
        
        free(pLessHead);
        free(pGreatHead);
        return pHead;
    }
};


7、https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&&tqId=11209&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针]
	
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
         if (pHead == NULL)
             return NULL;
         ListNode *pPre = NULL;
         ListNode *pCur = pHead;
         ListNode *pNext = pHead->next;
         while(pNext != NULL)
         {
             if(pCur->val != pNext->val)
             {
                 pPre = pCur;
                 pCur = pNext;
                 pNext = pNext->next;
             }
             else
             {
                 while(pNext && pNext->val==pCur->val)
                 {
                     pNext = pNext->next;
                 }
                 if(pPre != NULL)
                     pPre->next = pNext;
                 else
                     pHead = pNext;

                 while(pCur != pNext)
                 {
                     ListNode *p = pCur;
                     pCur = pCur->next;
                     free(p);
                 }

                 if(pNext != NULL)
                     pNext = pNext->next;
             }
         }
         return pHead;
    }
};

8、https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking [链表的回文结构]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) 
    {
        if(A == NULL)
            return true;
        // write code here
        int ar[10000];
        ListNode *p = A;
        int k = 0;
        while(p != NULL)
        {
            ar[k++] = p->val;
            p = p->next;
        }
        
        int start = 0;
        int end = k-1;
        while(start < end)
        {
            if(ar[start] != ar[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
};

9、https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/ [输入两个链表，找出它们的第一个公共结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

int getLength(struct ListNode *head)
{
    if(head == NULL)
        return 0;
    int len = 0;
    while(head != NULL)
    {
        len++;
        head = head->next;
    }
    return len;
}
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) 
{
    if(headA==NULL || headB==NULL)
        return NULL;
    int lenA = getLength(headA);
    int lenB = getLength(headB);

    int gap = abs(lenA - lenB);
    struct ListNode *shortList, *longList;
    if(lenA > lenB)
    {
        longList = headA;
        shortList = headB;
    }
    else
    {
        longList = headB;
        shortList = headA;
    }

    while(gap-- != 0)
        longList = longList->next;
    while(shortList!=NULL && longList!=NULL)
    {
        if(shortList == longList)
            return shortList;
        shortList = shortList->next;
        longList = longList->next;
    }
    return NULL;
}

10、https://leetcode-cn.com/problems/linked-list-cycle/description/ [ 给定一个链表，判断链表中是否有环]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) 
{
    if(head == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            return true;
    }    
    return false;
}


11、https://leetcode-cn.com/problems/linked-list-cycle-ii/description/ [给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 NULL]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) 
{
    if(head==NULL || head->next==NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            break;
    }    
    if(fast != slow)
        return NULL;
    fast = head;
    while(fast != slow)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return fast;
}






















栈和队列_Oj

1、https://leetcode-cn.com/problems/valid-parentheses/ [括号匹配]

#define DataType char
typedef struct StackNode
{
	DataType data;
	struct StackNode *next;
}StackNode;

typedef StackNode* ListStack;


bool ListStackEmpty(ListStack *pst);
void ListStackInit(ListStack *pst);
DataType ListStackTop(ListStack *pst);
void ListStackPush(ListStack *pst, DataType x);
void ListStackPop(ListStack *pst);
void ListStackShow(ListStack pst);

bool ListStackEmpty(ListStack *pst)
{
    return *pst == NULL;    
}

void ListStackInit(ListStack *pst)
{
	*pst = NULL;
}

DataType ListStackTop(ListStack *pst)
{
	assert(*pst != NULL);//
	return (*pst)->data;
}

void ListStackPush(ListStack *pst, DataType x)
{
	StackNode *node = (StackNode*)malloc(sizeof(StackNode));
	assert(node != NULL);
	node->data = x;

	node->next = *pst;
	*pst = node;
}

void ListStackPop(ListStack *pst)
{
	StackNode *p = *pst;
	*pst = p->next;
	free(p);
}

///////////////////////////////////////////////////////////
bool isValid(char * s)
{
    if(s == NULL)
        return false;
    if(*s == '\0')
        return true;

    ListStack st;
    ListStackInit(&st);

    while(*s != '\0')
    {
        if(*s=='(' || *s=='[' || *s=='{')
        {
            ListStackPush(&st, *s);
        }        
        else
        {
            if(ListStackEmpty(&st))
                return false;
            
            int topval = ListStackTop(&st);
            if((*s==')'&& topval!='(') 
               || (*s==']'&& topval!='[')
               || (*s=='}'&& topval!='{'))
                return false;
            ListStackPop(&st);
        }
        s++;
    }

    bool flag = ListStackEmpty(&st);
    free(st);
    st = NULL;
    return flag;
}

/*
bool isValid(char * s)
{
    if(s == NULL)
        return false;
    if(*s == '\0')
        return true;
    
    int len = strlen(s);
    char *st = (char*)malloc(sizeof(char) * len);
    int top = 0;

    while(*s != '\0')
    {
        if(*s=='(' || *s=='[' || *s=='{')
        {
            st[top++] = *s;
        }        
        else
        {
            if(top == 0)
                return false;
            
            if((*s==')'&&st[top-1]!='(') 
               || (*s==']'&&st[top-1]!='[')
               || (*s=='}'&&st[top-1]!='{'))
                return false;
            top--;
        }
        s++;
    }

    bool flag = (top==0?1:0);
    free(st);
    st = NULL;
    return flag;
}
*/

2、https://leetcode-cn.com/problems/implement-stack-using-queues/submissions/[用队列实现栈]
typedef struct Queue
{
    int *base;
    int front;
    int tail;
}Queue;

void QueueInit(Queue *Q)
{
    int n = 1000;
    Q->base = (int*) malloc(sizeof(int) * n);
    Q->front = Q->tail = 0;    
}
void QueuePush(Queue *Q, int x)
{
    Q->base[Q->tail++] = x;    
}
void QueuePop(Queue *Q)
{
    Q->front++;
}
int QueueFront(Queue *Q)
{
    return Q->base[Q->front];    
}
int QueueBack(Queue *Q)
{
    return Q->base[Q->tail-1];
}
bool QueueEmpty(Queue *Q)
{
    return Q->front == Q->tail;
}
//////////////////////////////////////////////////////
typedef struct 
{
    Queue  q1;
    Queue  q2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() 
{
    MyStack *pst = (MyStack *)malloc(sizeof(MyStack));
    QueueInit(&(pst->q1));
    QueueInit(&(pst->q2));
    return pst;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) 
{
     Queue *pnoempty;
    if(QueueEmpty(&(obj->q1)))
    {
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
    }
    QueuePush(pnoempty, x);
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) 
{
    Queue *pnoempty, *pempty;
    if(QueueEmpty(&(obj->q1)))
    {
        pempty = &(obj->q1);
        pnoempty = &(obj->q2);
    }
    else
    {
        pempty = &(obj->q2);
        pnoempty = &(obj->q1);
    }

    int val;
    while(!QueueEmpty(pnoempty))
    {
        val = QueueFront(pnoempty);
        QueuePop(pnoempty);
        if(QueueEmpty(pnoempty))
            break;
        QueuePush(pempty, val);
    }
    return val;
}

/** Get the top element. */
int myStackTop(MyStack* obj) 
{
    Queue *pnoempty;
    if(QueueEmpty(&(obj->q1)))
    {
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
    }

    return QueueBack(pnoempty);
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj)
{
     return QueueEmpty(&(obj->q1)) && QueueEmpty(&(obj->q2));
}

void myStackFree(MyStack* obj) 
{
    free(obj);    
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/

3、https://leetcode-cn.com/problems/implement-queue-using-stacks/ [用栈实现队列]

typedef struct Stack
{
    int *base;
    int  top;
    int  capacity;
}Stack;

bool StackFull(Stack *pst)
{
    return pst->top >= pst->capacity;
}
bool StackEmpty(Stack *pst)
{
    return pst->top == 0;
}
Stack* StackCreate(int k)
{
    Stack *pst = (Stack*)malloc(sizeof(Stack));
    pst->capacity = k;
    pst->base = (int*)malloc(sizeof(int) * pst->capacity);
    pst->top = 0;
    return pst;
}
void StackFree(Stack *pst)
{
    free(pst->base);
    pst->base = NULL;
    pst->capacity = pst->top = 0;
}
void StackPush(Stack *pst, int x)
{
    if(StackFull(pst))
        return;
    pst->base[pst->top++] = x;
}
void StackPop(Stack *pst)
{
    if(StackEmpty(pst))
        return;
    pst->top--;    
}
int StackTop(Stack *pst)
{
    assert(pst->top != 0);
    return pst->base[pst->top-1];
}

//////////////////////////////////////////////////////////////////
typedef struct 
{
    Stack *stack1;
    Stack *stack2;
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() 
{
    int n = 100;
    MyQueue *queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->stack1 = StackCreate(n);
    queue->stack2 = StackCreate(n);
    return queue;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) 
{
      StackPush(obj->stack1, x);
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) 
{
      if(StackEmpty(obj->stack2))
      {
          while(!StackEmpty(obj->stack1))
          {
              StackPush(obj->stack2, StackTop(obj->stack1));
              StackPop(obj->stack1);
          }
      }
      int val = StackTop(obj->stack2);
      StackPop(obj->stack2);
      return val;
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) 
{
    if(StackEmpty(obj->stack2))
      {
          while(!StackEmpty(obj->stack1))
          {
              StackPush(obj->stack2, StackTop(obj->stack1));
              StackPop(obj->stack1);
          }
      }
      int val = StackTop(obj->stack2);
      return val;      
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) 
{
    return StackEmpty(obj->stack1) && StackEmpty(obj->stack2);  
}

void myQueueFree(MyQueue* obj) 
{
    free(obj->stack1);
    free(obj->stack2);
    free(obj);    
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/

4、https://leetcode-cn.com/problems/min-stack/submissions/ [实现一个最小栈]

typedef struct Stack
{
    int *base;
    int  top;
    int  capacity;
}Stack;

bool StackFull(Stack *pst)
{
    return pst->top >= pst->capacity;
}
bool StackEmpty(Stack *pst)
{
    return pst->top == 0;
}
Stack* StackCreate(int k)
{
    Stack *pst = (Stack*)malloc(sizeof(Stack));
    pst->capacity = k;
    pst->base = (int*)malloc(sizeof(int) * pst->capacity);
    pst->top = 0;
    return pst;
}
void StackFree(Stack *pst)
{
    free(pst->base);
    pst->base = NULL;
    pst->capacity = pst->top = 0;
}
void StackPush(Stack *pst, int x)
{
    if(StackFull(pst))
        return;
    pst->base[pst->top++] = x;
}
void StackPop(Stack *pst)
{
    if(StackEmpty(pst))
        return;
    pst->top--;    
}
int StackTop(Stack *pst)
{
    assert(pst->top != 0);
    return pst->base[pst->top-1];
}

////////////////////////////////////////////////////////////////////

typedef struct 
{    
    Stack *st;
    Stack *min_st;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() 
{
    int n = 1000;
    MinStack *pst = (MinStack*)malloc(sizeof(MinStack));
    pst->st = StackCreate(n);
    pst->min_st = StackCreate(n);   
    return pst;
}

void minStackPush(MinStack* obj, int x) 
{
      StackPush(obj->st, x);
      if(StackEmpty(obj->min_st) || x<=StackTop(obj->min_st))
      {
          StackPush(obj->min_st, x);          
      }
}

void minStackPop(MinStack* obj) 
{
    int val = StackTop(obj->st);
    StackPop(obj->st);

    if(val == StackTop(obj->min_st))
    {
        StackPop(obj->min_st);
    }
}

int minStackTop(MinStack* obj) 
{
    return StackTop(obj->st);
}

int minStackGetMin(MinStack* obj) 
{
    return StackTop(obj->min_st);
}

void minStackFree(MinStack* obj) 
{
    free(obj->st);
    free(obj->min_st);
    free(obj);    
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/

5、https://leetcode-cn.com/problems/design-circular-queue/ [设计循环队列]

typedef struct 
{
    int *base;
    int capacity;
    int front;
    int tail;
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */

bool myCircularQueueIsEmpty(MyCircularQueue* obj) ;
/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj);

MyCircularQueue* myCircularQueueCreate(int k) 
{
    MyCircularQueue *pc = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    pc->capacity = k+1;
    pc->base = (int*)malloc(sizeof(int)*pc->capacity);
    pc->front = pc->tail = 0;
    return pc;
}

/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) 
{
    if(myCircularQueueIsFull(obj))
        return false;
    obj->base[obj->tail] = value;
    obj->tail = (obj->tail+1) % obj->capacity;
    return true;
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj)) 
        return false;
    obj->front = (obj->front+1) % obj->capacity;
    return true; 
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[obj->front];  
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[(obj->tail-1+obj->capacity)%obj->capacity];  
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) 
{
    return obj->front == obj->tail;  
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) 
{
    return (obj->tail+1)%(obj->capacity) == obj->front;  
}

void myCircularQueueFree(MyCircularQueue* obj) 
{
    free(obj->base);
    free(obj);    
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/

二叉树 初阶
1、https://leetcode-cn.com/problems/binary-tree-preorder-traversal/ [二叉树的前序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int size(struct TreeNode *root)
{
    if(root == NULL)
        return 0;
    else
        return size(root->left)+size(root->right)+1;
}

void _preorderTraversal(struct TreeNode* root, int *preorder, int *i)
{
    if(root != NULL)
    {
        preorder[*i] = root->val;
        (*i)++;
        _preorderTraversal(root->left, preorder, i);
        _preorderTraversal(root->right, preorder, i);
    }
}

int* preorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = size(root);
    int *preorder = (int*)malloc(sizeof(int)*n);
    *returnSize = n;

    int i = 0;
    _preorderTraversal(root, preorder, &i);

    return preorder;
}

2、https://leetcode-cn.com/problems/binary-tree-inorder-traversal/submissions/ [二叉树的中序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int size(struct TreeNode *root)
{
    if(root == NULL)
        return 0;
    else
        return size(root->left)+size(root->right)+1;
}
void _inorderTraversal(struct TreeNode* root, int *inorder, int *i)
{
    if(root != NULL)
    {
        _inorderTraversal(root->left, inorder, i);
        inorder[*i] = root->val;
        (*i)++;
        _inorderTraversal(root->right, inorder, i);
    }
}
int* inorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = size(root);
    *returnSize = n;
    int *inorder = (int*)malloc(sizeof(int) * n);

    int index = 0;
    _inorderTraversal(root, inorder, &index);

    return inorder;
}

3、https://leetcode-cn.com/problems/binary-tree-postorder-traversal/submissions/ [二叉树的后序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */


int size(struct TreeNode *root)
{
    if(root == NULL)
        return 0;
    else
        return size(root->left)+size(root->right)+1;
}
void _postorderTraversal(struct TreeNode* root, int *postorder, int *i)
{
    if(root != NULL)
    {
        _postorderTraversal(root->left, postorder, i);
        _postorderTraversal(root->right, postorder, i);
        postorder[*i] = root->val;
        (*i)++;
    }
}

int* postorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = size(root);
    *returnSize = n;
    int *postorder = (int*)malloc(sizeof(int) * n);

    int index = 0;
    _postorderTraversal(root, postorder, &index);

    return postorder;
}

4、https://leetcode-cn.com/problems/same-tree/submissions/ [检查两颗树是否相同]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


bool isSameTree(struct TreeNode* p, struct TreeNode* q)
{
    if(p==NULL && q==NULL)
        return true;
    if(p==NULL || q==NULL)
        return false;
    return p->val==q->val && isSameTree(p->left, q->left) 
    && isSameTree(p->right, q->right);
}

5、https://leetcode-cn.com/problems/subtree-of-another-tree/ [另一颗树的子树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool isSameTree(struct TreeNode* p, struct TreeNode* q)
{
    if(p==NULL && q==NULL)
        return true;
    if(p==NULL || q==NULL)
        return false;
    return p->val==q->val && isSameTree(p->left, q->left) 
    && isSameTree(p->right, q->right);
}

bool isSubtree(struct TreeNode* s, struct TreeNode* t)
{
    if(t == NULL)
        return true;    
    if(s == NULL)
        return false;
    if(isSameTree(s, t))
        return true;
    return isSubtree(s->left, t) || isSubtree(s->right, t);
}

6、https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/submissions/ [二叉树最大深度]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


int maxDepth(struct TreeNode* root)
{
    if(root == NULL)
        return 0;
    else
    {
        int left_h = maxDepth(root->left);
        int right_h = maxDepth(root->right);
        return (left_h>right_h ? left_h : right_h)+1;
    }
}

7、https://leetcode-cn.com/problems/balanced-binary-tree/submissions/ [判断一颗二叉树是否是平衡二叉树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

int maxDepth(struct TreeNode* root)
{
    if(root == NULL)
        return 0;
    else
    {
        int left_h = maxDepth(root->left);
        int right_h = maxDepth(root->right);
        return (left_h>right_h ? left_h : right_h)+1;
    }
}

bool isBalanced(struct TreeNode* root)
{
    if(root == NULL)
        return true;
    int left_h = maxDepth(root->left);
    int right_h = maxDepth(root->right);

    return (abs(left_h-right_h)<2)
           && isBalanced(root->left)
           && isBalanced(root->right);
}

8、https://leetcode-cn.com/problems/symmetric-tree/ [对称二叉树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool _isSymmetric(struct TreeNode *t1, struct TreeNode *t2)
{
    if(t1==NULL && t2==NULL)
        return true;
    if(t1==NULL ||t2==NULL)
        return false;
    return t1->val==t2->val
           && _isSymmetric(t1->left, t2->right)
           && _isSymmetric(t1->right, t2->left);
}

bool isSymmetric(struct TreeNode* root)
{
    if(root == NULL)
        return true;
    return _isSymmetric(root->left, root->right);
}

9、https://www.nowcoder.com/practice/4b91205483694f449f94c179883c1fef?tpId=60&&tqId=29483&rp=1&ru=/activity/oj&qru=/ta/tsing-kaoyan/question-ranking [二叉树的构建及遍历]
#include<stdio.h>

typedef struct BinTreeNode
{
    char val;
    struct BinTreeNode *left;
    struct BinTreeNode *right;
}BinTreeNode;

typedef BinTreeNode* BinTree;

BinTree CreateBinTree(char *str, int *i)
{
    if(str[*i]=='#' || str[*i]=='\0')
        return NULL;
    BinTreeNode *t = (BinTreeNode*)malloc(sizeof(BinTreeNode));
    t->val = str[*i];
    (*i)++;
    t->left = CreateBinTree(str, i);
    (*i)++;
    t->right = CreateBinTree(str, i);
    return t;
}

void InOrder(BinTree t)
{
    if(t != NULL)
    {
        InOrder(t->left);
        printf("%c ", t->val);
        InOrder(t->right);
    }
}

int main()
{
    BinTree bt = NULL;
    char str[1000] = {0};
    scanf("%s", str);
    int i = 0;
    bt = CreateBinTree(str, &i);
    InOrder(bt);
        
    return 0;
}


二叉树 进阶
1、 https://leetcode-cn.com/problems/construct-string-from-binary-tree/ [二叉树创建字符串]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

char buf[10];
void _tree2str(struct TreeNode *t, char *str)
{
    if(t == NULL)
        return;
    sprintf(buf, "%d", t->val);
    strcat(str, buf);

    if(t->left == NULL)
    {
        if(t->right == NULL)
            return;
        else
            strcat(str, "()");       
    }
    else
    {
    
            strcat(str, "(");
            _tree2str(t->left, str);
            strcat(str, ")");
    }

    if(t->right == NULL)
        return;
    else
    {
        strcat(str, "(");
        _tree2str(t->right, str);
        strcat(str, ")");
    }
}

char str[100000];
char * tree2str(struct TreeNode* t)
{
    str[0] = '\0';
    //int n = 100000;
    //char *str = (char *)malloc(sizeof(char) * n);
    //str[0] = '\0';   // 
    _tree2str(t, str);
    return str;
}

2、https://leetcode-cn.com/problems/binary-tree-level-order-traversal/ [二叉树的分层遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int Height(struct TreeNode *t)
{
    if(t == NULL)
        return 0;
    else
    {
        int left_h = Height(t->left);
        int right_h = Height(t->right);
        return (left_h > right_h ? left_h : right_h) + 1;        
    }
}
int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes)
{
    if(root == NULL)
    {
        *returnSize = 0;
        return NULL;
    }

    int max_level = Height(root);
    *returnSize = max_level;
    int **levelArray = (int**)malloc(sizeof(int*) * max_level);
    *returnColumnSizes = (int*)malloc(sizeof(int) * max_level);

    struct TreeNode *q1[1000], *q2[1000]; //
    int q1_size=0, q2_size=0;

    q1[0] = root;
    q1_size++;
    int level = 0;
    while(level < max_level)
    {
        levelArray[level] = (int*)malloc(sizeof(int) * q1_size);
        for(int i=0; i<q1_size; ++i)
        {
            levelArray[level][i] = q1[i]->val;
        }
        (*returnColumnSizes)[level] = q1_size;

        for(int i=0; i<q1_size; ++i)
        {
            if(q1[i]->left != NULL)
                q2[q2_size++] = q1[i]->left;
            if(q1[i]->right != NULL)
                q2[q2_size++] = q1[i]->right;
        }

        memcpy(q1, q2, sizeof(struct TreeNode*) * q2_size);
        q1_size = q2_size;
        q2_size = 0;

        level++;
    }
    
    return levelArray;
}


3、https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/ [ 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool findNode(struct TreeNode *root, struct TreeNode *n)
{
    if(root == NULL)
        return false;
    if(root == n)
        return true;
    return findNode(root->left, n) || findNode(root->right, n);
}

struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) 
{
    if(root == NULL)
        return NULL;
    if(p==root || q==root)
        return root;
    
    bool pInleft, pInright, qInleft, qInright;
    if(findNode(root->left, p))
    {
        pInleft = true;
        pInright = false;
    }
    else
    {
        pInleft = false;
        pInright = true;
    }

    if(findNode(root->right, q))
    {
        qInleft = false;
        qInright = true;        
    }
    else
    {
        qInleft = true;
        qInright = false;
    }
    
    if(pInleft && qInleft)
        return lowestCommonAncestor(root->left, p, q);
    if(pInright && qInright)
        return lowestCommonAncestor(root->right, p, q);
    return root;
}


4、https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&&tqId=11179&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [二叉树搜索树转换成排序双向链表]
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    void ConvertList(TreeNode *t, TreeNode **pre)
    {
        if(t == NULL)
            return;
        ConvertList(t->left, pre);
        t->left = *pre;
        if(*pre != NULL)
            (*pre)->right = t;
        *pre = t;
        ConvertList(t->right, pre);
    }
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree == NULL)
            return NULL;
        TreeNode *pre = NULL;
        ConvertList(pRootOfTree, &pre);
        
        TreeNode *pHead = pre;
        while(pHead->left != NULL)
        {
            pHead = pHead->left;
        }
        return pHead;
    }
};


5、 https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/ [二叉树搜索树转换成排序双向链表]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


struct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize)
{
    if(inorderSize == 0)
        return NULL;    
    int k = 0;
    while(inorder[k] != preorder[0])
        k++;
    struct TreeNode *t = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    t->val = inorder[k];

    t->left = buildTree(preorder+1, k, inorder, k);
    t->right = buildTree(preorder+k+1, preorderSize-k-1, inorder+k+1, inorderSize-k-1);
    return t;
}

6、https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/ [根据一棵树的中序遍历与后序遍历构造二叉树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


struct TreeNode* buildTree(int* inorder, int inorderSize, int* postorder, int postorderSize)
{
    if(inorderSize == 0)
        return NULL;
    int val = postorder[postorderSize-1];
    int k = 0;
    while(val != inorder[k])
        k++;
    struct TreeNode *t = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    t->val = val;
    t->right = buildTree(inorder+k+1, inorderSize-k-1, postorder+k, postorderSize-k-1);
    t->left = buildTree(inorder, k, postorder, k);
    return t;
}
